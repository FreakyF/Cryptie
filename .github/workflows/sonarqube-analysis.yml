name: SonarQube Analysis

on:
  workflow_call:
    inputs:
      sonar_token:
        required: true
        type: string
jobs:
  analyze:
    name: Analyze with SonarQube
    runs-on: windows-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Download Unit Test Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage-report-${{ github.sha }}
          path: .
          if-no-files-found: warn

      - name: Download Integration Test Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: integration-coverage-report-${{ github.sha }}
          path: .
          if-no-files-found: warn

      - name: Construct coverage report paths
        id: coverage_paths
        shell: powershell
        run: |
          $paths = ""
          if (Test-Path "unit-coverage.opencover.xml") {
            $paths = "unit-coverage.opencover.xml"
          }
          if (Test-Path "integration-coverage.opencover.xml") {
            if ($paths) {
              $paths = "$paths,integration-coverage.opencover.xml"
            } else {
              $paths = "integration-coverage.opencover.xml"
            }
          }
          if (-not $paths) {
            Write-Host "No coverage reports found to provide to SonarQube."
          }
          echo "sonar_paths=$paths" >> $GITHUB_ENV

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          $COVERAGE_ARGS = ""
          if ($env:sonar_paths) {
            $COVERAGE_ARGS = "/d:sonar.cs.opencover.reportsPaths=$env:sonar_paths"
          }

          .\.sonar\scanner\dotnet-sonarscanner begin /k:"FreakyF_Cryptie" /o:"freakyf" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" $COVERAGE_ARGS $PR_ARGS

      - name: Build project (for SonarQube Roslyn analyzers)
        run: dotnet build --no-incremental

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
